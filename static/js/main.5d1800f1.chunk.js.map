{"version":3,"sources":["InfoBox.js","util.js","Map.js","LineGraph.js","Table.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","className","onClick","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","prettyPrintStat","stat","undefined","lastThree","toString","substring","length","otherNumbers","res","replace","prettyPrintStatForTotal","Map","countries","casesType","center","zoom","TileLayer","url","attribution","data","console","log","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","half_op","LineGraph","casesTypes","useState","setData","buildChartData","lastDatapoint","chartData","date","newDataPoint","x","y","push","useEffect","a","fetch","then","response","json","fetchData","datasets","backgroundColor","borderColor","Table","Footer","textAlign","href","theme","createMuiTheme","palette","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","sort","b","sortData","ThemeProvider","FormControl","Select","variant","onChange","event","countryCode","target","MenuItem","e","todayCases","todayRecovered","todayDeaths","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5d1800f1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\r\n\treturn (\r\n\t\t<Card\r\n\t\t\tclassName={`infoBox ${active && \"infoBox--selected\"}  ${\r\n\t\t\t\tisRed && \"infoBox--red\"\r\n\t\t\t}`}\r\n\t\t\tonClick={props.onClick}\r\n\t\t>\r\n\t\t\t<CardContent>\r\n\t\t\t\t{/* TITLE */}\r\n\t\t\t\t<Typography className='infoBox__title' color='textSecondary'>\r\n\t\t\t\t\t{title}\r\n\t\t\t\t</Typography>\r\n\t\t\t\t{/*CASES*/}\r\n\t\t\t\t<h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n\t\t\t\t\t{cases}\r\n\t\t\t\t</h2>\r\n\t\t\t\t{/*TOTAL CASES */}\r\n\t\t\t\t<Typography className='infoBox_total' color='textSecondary'>\r\n\t\t\t\t\tTotal :{total}\r\n\t\t\t\t</Typography>\r\n\t\t\t</CardContent>\r\n\t\t</Card>\r\n\t);\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n\tcases: {\r\n\t\thex: \"#cc1034\",\r\n\t\tmultiplier: 800,\r\n\t},\r\n\trecovered: {\r\n\t\thex: \"#7dd71d\",\r\n\t\tmultiplier: 1200,\r\n\t},\r\n\tdeaths: {\r\n\t\thex: \"#000\",\r\n\t\tmultiplier: 2000,\r\n\t},\r\n};\r\n\r\nexport const sortData = (data) => {\r\n\tconst sortedData = [...data];\r\n\r\n\tsortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n\r\n\treturn sortedData;\r\n};\r\n\r\n// Exporting formatted Numbers\r\nexport const prettyPrintStat = (stat) => {\r\n\tif (stat !== undefined) {\r\n\t\tstat = stat.toString();\r\n\t\tvar lastThree = stat.substring(stat.length - 3);\r\n\t\tvar otherNumbers = stat.substring(0, stat.length - 3);\r\n\t\tif (otherNumbers !== \"\") lastThree = \",\" + lastThree;\r\n\t\tvar res = otherNumbers.replace(/\\B(?=(\\d{2})+(?!\\d))/g, \",\") + lastThree;\r\n\t\treturn `+${res}`;\r\n\t} else return 0;\r\n};\r\n\r\nexport const prettyPrintStatForTotal = (stat) => {\r\n\tif (stat !== undefined) {\r\n\t\tstat = stat.toString();\r\n\t\tvar lastThree = stat.substring(stat.length - 3);\r\n\t\tvar otherNumbers = stat.substring(0, stat.length - 3);\r\n\t\tif (otherNumbers !== \"\") lastThree = \",\" + lastThree;\r\n\t\tvar res = otherNumbers.replace(/\\B(?=(\\d{2})+(?!\\d))/g, \",\") + lastThree;\r\n\t\treturn res;\r\n\t} else return 0;\r\n};\r\n\r\n// For creating choropleths\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") => {\r\n\tconsole.log(\"FUNCTION RUNNING\");\r\n\t// console.log(casesTypeColors[casesType]);\r\n\treturn data.map((country) => (\r\n\t\t<Circle\r\n\t\t\tcenter={[country.countryInfo.lat, country.countryInfo.long]}\r\n\t\t\tfillOpacity={0.4}\r\n\t\t\tcolor={casesTypeColors[casesType].hex}\r\n\t\t\tfillColor={casesTypeColors[casesType].hex}\r\n\t\t\tradius={\r\n\t\t\t\tMath.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n\t\t\t}\r\n\t\t>\r\n\t\t\t<Popup>\r\n\t\t\t\t<div className='info-container'>\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tstyle={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n\t\t\t\t\t\tclassName='info-flag'\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div className='info-name'>{country.country}</div>\r\n\t\t\t\t\t<div className='info-confirmed'>\r\n\t\t\t\t\t\tCases : {prettyPrintStatForTotal(country.cases)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='info-recovered'>\r\n\t\t\t\t\t\tRecovered : {prettyPrintStatForTotal(country.recovered)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='info-deaths'>\r\n\t\t\t\t\t\tDeaths : {prettyPrintStatForTotal(country.deaths)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</Popup>\r\n\t\t</Circle>\r\n\t));\r\n};\r\n","import React from \"react\";\r\nimport \"./Map.css\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n\treturn (\r\n\t\t<div className='map'>\r\n\t\t\t<LeafletMap center={center} zoom={zoom}>\r\n\t\t\t\t<TileLayer\r\n\t\t\t\t\turl='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\r\n\t\t\t\t\tattribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t{showDataOnMap(countries, casesType)}\r\n\t\t\t</LeafletMap>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Map;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n\tlegend: {\r\n\t\tdisplay: false,\r\n\t},\r\n\telements: {\r\n\t\tpoint: {\r\n\t\t\tradius: 0,\r\n\t\t},\r\n\t},\r\n\tmaintainAspectRatio: false,\r\n\ttooltips: {\r\n\t\tmode: \"index\",\r\n\t\tintersect: false,\r\n\t\tcallbacks: {\r\n\t\t\tlabel: function (tooltipItem, data) {\r\n\t\t\t\treturn numeral(tooltipItem.value).format(\"+0,0\");\r\n\t\t\t},\r\n\t\t},\r\n\t},\r\n\tscales: {\r\n\t\txAxes: [\r\n\t\t\t{\r\n\t\t\t\ttype: \"time\",\r\n\t\t\t\ttime: {\r\n\t\t\t\t\tformat: \"MM/DD/YY\",\r\n\t\t\t\t\ttooltipFormat: \"ll\",\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t],\r\n\t\tyAxes: [\r\n\t\t\t{\r\n\t\t\t\tgridLines: false,\r\n\t\t\t\tticks: {\r\n\t\t\t\t\tcallback: function (value, index, values) {\r\n\t\t\t\t\t\treturn numeral(value).format(\"0a\");\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t],\r\n\t},\r\n};\r\n\r\n// GRAPH COLORS\r\n\r\nconst casesTypeColors = {\r\n\tcases: {\r\n\t\thex: \"#cc1034\",\r\n\t\tmultiplier: 800,\r\n\t\thalf_op: \"rgba(204, 16, 52, 0.4)\",\r\n\t},\r\n\trecovered: {\r\n\t\thex: \"#7dd71d\",\r\n\t\tmultiplier: 1200,\r\n\t\thalf_op: \"rgba(125,215,29,0.4)\",\r\n\t},\r\n\tdeaths: {\r\n\t\thex: \"#000\",\r\n\t\tmultiplier: 2000,\r\n\t\thalf_op: \"rgba(0,0,0,0.4)\",\r\n\t},\r\n};\r\n\r\nfunction LineGraph({ casesTypes = \"cases\", ...props }) {\r\n\tconst [data, setData] = useState({});\r\n\tconst buildChartData = (data) => {\r\n\t\tconst chartData = [];\r\n\t\tlet lastDatapoint;\r\n\t\tfor (let date in data.cases) {\r\n\t\t\tif (lastDatapoint) {\r\n\t\t\t\tconst newDataPoint = {\r\n\t\t\t\t\tx: date,\r\n\t\t\t\t\ty: data[casesTypes][date] - lastDatapoint,\r\n\t\t\t\t};\r\n\t\t\t\t//console.log(newDataPoint);\r\n\t\t\t\tchartData.push(newDataPoint);\r\n\t\t\t}\r\n\t\t\tlastDatapoint = data[casesTypes][date];\r\n\t\t}\r\n\t\treturn chartData;\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchData = async () => {\r\n\t\t\tawait fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t})\r\n\t\t\t\t.then((data) => {\r\n\t\t\t\t\tconst chartData = buildChartData(data);\r\n\t\t\t\t\tsetData(chartData);\r\n\t\t\t\t});\r\n\t\t};\r\n\r\n\t\tfetchData();\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div className={props.className}>\r\n\t\t\t{data?.length > 0 && (\r\n\t\t\t\t<Line\r\n\t\t\t\t\toptions={options}\r\n\t\t\t\t\tdata={{\r\n\t\t\t\t\t\tdatasets: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbackgroundColor: casesTypeColors[casesTypes].half_op,\r\n\t\t\t\t\t\t\t\tborderColor: casesTypeColors[casesTypes].hex,\r\n\t\t\t\t\t\t\t\tdata: data,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default LineGraph;\r\n","import React from \"react\";\r\nimport { prettyPrintStatForTotal } from \"./util\";\r\nimport \"./Table.css\";\r\nfunction Table({ countries }) {\r\n\treturn (\r\n\t\t<div className='table'>\r\n\t\t\t{countries.map(({ country, cases }) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td>{country}</td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t<strong>{prettyPrintStatForTotal(cases)}</strong>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n\treturn (\r\n\t\t<div style={{ textAlign: \"center\", color: \"white\" }}>\r\n\t\t\tMade With <span>❤️</span> by Tarun Kishore |{\" \"}\r\n\t\t\t<a href='https://www.linkedin.com/in/tarun-kishore-b9304a196/'>\r\n\t\t\t\tContact Developer\r\n\t\t\t</a>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState, useEffect } from \"react\";\nimport {\n\tFormControl,\n\tMenuItem,\n\tSelect,\n\tcreateMuiTheme,\n\tCard,\n\tCardContent,\n} from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport LineGraph from \"./LineGraph\";\nimport { sortData, prettyPrintStat, prettyPrintStatForTotal } from \"./util\";\nimport Table from \"./Table\";\nimport \"./App.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport Footer from \"./Footer\";\n\nconst theme = createMuiTheme({\n\tpalette: {\n\t\ttype: \"dark\",\n\t},\n});\n\nfunction App() {\n\tconst [countries, setCountries] = useState([]);\n\tconst [country, setCountry] = useState(\"worldwide\");\n\tconst [countryInfo, setCountryInfo] = useState({});\n\tconst [tableData, setTableData] = useState([]);\n\tconst [mapCenter, setMapCenter] = useState({ lat: 20.5937, lng: 78.9629 });\n\tconst [mapZoom, setMapZoom] = useState(4);\n\tconst [mapCountries, setMapCountries] = useState([]);\n\tconst [casesType, setCasesType] = useState(\"cases\");\n\tuseEffect(() => {\n\t\tfetch(\"https://disease.sh/v3/covid-19/all\")\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tsetCountryInfo(data);\n\t\t\t});\n\t}, []);\n\n\tuseEffect(() => {\n\t\tconst fetchData = () => {\n\t\t\tfetch(\"https://disease.sh/v3/covid-19/countries\")\n\t\t\t\t.then((response) => {\n\t\t\t\t\treturn response.json();\n\t\t\t\t})\n\t\t\t\t.then((data) => {\n\t\t\t\t\tconst countries = data.map((country) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tname: country.country,\n\t\t\t\t\t\t\tvalue: country.countryInfo.iso2,\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t\tconst sortedData = sortData(data);\n\t\t\t\t\tsetMapCountries(data);\n\t\t\t\t\tsetTableData(sortedData);\n\t\t\t\t\tsetCountries(countries);\n\t\t\t\t});\n\t\t};\n\t\tfetchData();\n\t}, []);\n\n\tconst onCountryChange = (event) => {\n\t\tconst countryCode = event.target.value;\n\t\tsetCountry(countryCode);\n\n\t\tconst url =\n\t\t\tcountryCode === \"worldwide\"\n\t\t\t\t? \"https://disease.sh/v3/covid-19/all\"\n\t\t\t\t: `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n\t\tfetch(url)\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tsetCountry(countryCode);\n\t\t\t\tsetCountryInfo(data);\n\t\t\t\tsetMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n\t\t\t});\n\t};\n\n\t// console.log(\"COUNTRY INFO\", countryInfo);\n\treturn (\n\t\t<ThemeProvider theme={theme}>\n\t\t\t<div className='App'>\n\t\t\t\t<div className='app__left'>\n\t\t\t\t\t<div className='app__header'>\n\t\t\t\t\t\t<h1>COVID 19 TRACKER</h1>\n\t\t\t\t\t\t<FormControl className='app__dropdown'>\n\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\t\t\tvalue={country}\n\t\t\t\t\t\t\t\tonChange={onCountryChange}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<MenuItem value='worldwide'>Worldwide</MenuItem>\n\t\t\t\t\t\t\t\t{countries.map((country) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<MenuItem value={country.value}>{country.name}</MenuItem>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='app__stats'>\n\t\t\t\t\t\t<InfoBox\n\t\t\t\t\t\t\tisRed\n\t\t\t\t\t\t\tactive={casesType === \"cases\"}\n\t\t\t\t\t\t\tonClick={(e) => setCasesType(\"cases\")}\n\t\t\t\t\t\t\ttitle='Confirmed'\n\t\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayCases)}\n\t\t\t\t\t\t\ttotal={prettyPrintStatForTotal(countryInfo.cases)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<InfoBox\n\t\t\t\t\t\t\tactive={casesType === \"recovered\"}\n\t\t\t\t\t\t\tonClick={(e) => setCasesType(\"recovered\")}\n\t\t\t\t\t\t\ttitle='Recovered'\n\t\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayRecovered)}\n\t\t\t\t\t\t\ttotal={prettyPrintStatForTotal(countryInfo.recovered)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<InfoBox\n\t\t\t\t\t\t\tisRed\n\t\t\t\t\t\t\tactive={casesType === \"deaths\"}\n\t\t\t\t\t\t\tonClick={(e) => setCasesType(\"deaths\")}\n\t\t\t\t\t\t\ttitle='Deceased'\n\t\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayDeaths)}\n\t\t\t\t\t\t\ttotal={prettyPrintStatForTotal(countryInfo.deaths)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t<Map\n\t\t\t\t\t\t\tcountries={mapCountries}\n\t\t\t\t\t\t\tcenter={mapCenter}\n\t\t\t\t\t\t\tzoom={mapZoom}\n\t\t\t\t\t\t\tcasesType={casesType}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t</div>\n\n\t\t\t\t<Card className='app__right'>\n\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t<h3>Live Cases</h3>\n\t\t\t\t\t\t<Table countries={tableData} />\n\t\t\t\t\t\t<h3 className='app__graphTitle'>Worldwide new Cases</h3>\n\t\t\t\t\t\t<LineGraph casesTypes={casesType} className='app__graph' />\n\t\t\t\t\t</CardContent>\n\t\t\t\t</Card>\n\t\t\t</div>\n\t\t\t<Footer className='footer' />\n\t\t</ThemeProvider>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}